{"version":3,"sources":["component/WeatherTimePosition.jsx","component/WeatherImage.jsx","component/xyConv.js","component/Weather.jsx","App.jsx","index.js"],"names":["WeatherTimePosition","position","time","id","date","hour","className","minute","seconds","ampm","WeatherImage","weather","useEffect","console","log","item","filter","category","fcstValue","defaultProps","latitude","longitude","dong","RE","GRID","SLAT1","SLAT2","OLON","OLAT","XO","YO","Weather","useState","setPosition","setTime","setWeather","navigator","geolocation","getCurrentPosition","p","window","localStorage","getItem","JSON","parse","axios","get","coords","toFixed","headers","then","data","results","region","area3","name","setItem","stringify","getPostion","setInterval","moment","tz","format","v1","v2","DEGRAD","Math","PI","re","slat1","slat2","olon","olat","sn","tan","cos","sf","pow","ro","rs","lat","lng","ra","theta","x","floor","sin","y","xyConv","response","body","items","getWeather","App","target","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51c861bd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function WeatherTimePosition({ position, time }) {\n  return (\n    <div id=\"weatherTimePositionWrapper\">\n      <div id=\"weatherTime\">\n        <p id=\"weatherDate\">{time.date}</p>\n        <p>\n          {time.hour}\n          <span className=\"small\">:</span>\n          {time.minute}\n          <span className=\"small\">:</span>\n          {time.seconds}\n          <span className=\"small\">{time.ampm}</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nWeatherTimePosition.propTypes = {\n  position: PropTypes.shape({\n    latitude: PropTypes.number,\n    longitude: PropTypes.number,\n    dong: PropTypes.string,\n  }),\n  time: PropTypes.shape({\n    date: PropTypes.string,\n    hour: PropTypes.string,\n    minute: PropTypes.string,\n    seconds: PropTypes.string,\n    ampm: PropTypes.string,\n  }),\n};\n\nWeatherTimePosition.defaultProps = {\n  position: { latitude: 37.6314, longitude: 126.8345, dong: '화정2동' },\n  time: {\n    date: '2019.01.01',\n    hour: '00',\n    minute: '00',\n    seconds: '00',\n    ampm: 'AM',\n  },\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function WeatherImage({ weather }) {\n  useEffect(() => {\n    if (weather) {\n      console.log(\n        weather.item.filter(item => item.category === 'SKY')[0].fcstValue ===\n          1 && '맑음',\n      );\n    }\n  }, [weather]);\n  return <div id=\"weatherImage\" />;\n}\n\nWeatherImage.propTypes = {\n  weather: PropTypes.object,\n};\n","const RE = 6371.00877; // 지구 반경(km)\nconst GRID = 5.0; // 격자 간격(km)\nconst SLAT1 = 30.0; // 투영 위도1(degree)\nconst SLAT2 = 60.0; // 투영 위도2(degree)\nconst OLON = 126.0; // 기준점 경도(degree)\nconst OLAT = 38.0; // 기준점 위도(degree)\nconst XO = 43; // 기준점 X좌표(GRID)\nconst YO = 136; // 기준점 Y좌표(GRID)\n\nexport default function xyConv(v1, v2) {\n  const DEGRAD = Math.PI / 180.0;\n\n  const re = RE / GRID;\n  const slat1 = SLAT1 * DEGRAD;\n  const slat2 = SLAT2 * DEGRAD;\n  const olon = OLON * DEGRAD;\n  const olat = OLAT * DEGRAD;\n\n  let sn =\n    Math.tan(Math.PI * 0.25 + slat2 * 0.5) /\n    Math.tan(Math.PI * 0.25 + slat1 * 0.5);\n  sn = Math.log(Math.cos(slat1) / Math.cos(slat2)) / Math.log(sn);\n  let sf = Math.tan(Math.PI * 0.25 + slat1 * 0.5);\n  sf = (Math.pow(sf, sn) * Math.cos(slat1)) / sn;\n  let ro = Math.tan(Math.PI * 0.25 + olat * 0.5);\n  ro = (re * sf) / Math.pow(ro, sn);\n  const rs = {};\n  rs.lat = v1;\n  rs.lng = v2;\n  let ra = Math.tan(Math.PI * 0.25 + v1 * DEGRAD * 0.5);\n  ra = (re * sf) / Math.pow(ra, sn);\n  let theta = v2 * DEGRAD - olon;\n  if (theta > Math.PI) theta -= 2.0 * Math.PI;\n  if (theta < -Math.PI) theta += 2.0 * Math.PI;\n  theta *= sn;\n  rs.x = Math.floor(ra * Math.sin(theta) + XO + 0.5);\n  rs.y = Math.floor(ro - ra * Math.cos(theta) + YO + 0.5);\n  return rs;\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment-timezone';\nimport WeatherTimePosition from './WeatherTimePosition';\nimport WeatherImage from './WeatherImage';\nimport xyConv from './xyConv';\n\nexport default function Weather() {\n  const [position, setPosition] = useState();\n  const [time, setTime] = useState();\n  const [weather, setWeather] = useState();\n\n  useEffect(() => {\n    function getPostion(p) {\n      axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/https://naveropenapi.apigw.ntruss.com/map-reversegeocode/v2/gc?request=coordsToaddr&coords=${+p.coords.longitude.toFixed(\n            4,\n          )},${+p.coords.latitude.toFixed(4)}&orders=admcode&output=json`,\n          {\n            headers: {\n              'X-NCP-APIGW-API-KEY-ID': 'y6syzp2el8',\n              'X-NCP-APIGW-API-KEY': 'oGUQ22oSWOEDf44apBf9QSZVKanLLauMgr5CnBDy',\n            },\n          },\n        )\n        .then(data => {\n          setPosition({\n            latitude: +p.coords.latitude.toFixed(4),\n            longitude: +p.coords.longitude.toFixed(4),\n            dong: data.data.results[0].region.area3.name,\n          });\n          window.localStorage.setItem(\n            'position',\n            JSON.stringify({\n              latitude: +p.coords.latitude.toFixed(4),\n              longitude: +p.coords.longitude.toFixed(4),\n              dong: data.data.results[0].region.area3.name,\n            }),\n          );\n        });\n    }\n    navigator.geolocation.getCurrentPosition(p => {\n      if (!window.localStorage.getItem('position')) {\n        getPostion(p);\n      } else {\n        setPosition(JSON.parse(window.localStorage.getItem('position')));\n      }\n    });\n    setInterval(() => {\n      setTime({\n        date: moment.tz('Asia/Seoul').format('YYYY.MM.DD'),\n        hour: moment.tz('Asia/Seoul').format('hh'),\n        minute: moment.tz('Asia/Seoul').format('mm'),\n        seconds: moment.tz('Asia/Seoul').format('ss'),\n        ampm: moment.tz('Asia/Seoul').format('A'),\n      });\n    }, 100);\n  }, []);\n  useEffect(() => {\n    function getWeather() {\n      const { x, y } = xyConv(position.latitude, position.longitude);\n      axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/http://newsky2.kma.go.kr/service/SecndSrtpdFrcstInfoService2/ForecastSpaceData?ServiceKey=j%2BeCKcismlZK%2BpaFNLrSPqSvTKVFFiiUqzXfxIXmNPl%2F4dWUGjlDL9wjnnAVFfGUGfJMK62lqnYwqLQe4r88fA%3D%3D&base_date=${moment\n            .tz('Asia/Seoul')\n            .format('YYYYMMDD')}&base_time=0500&nx=${x}&ny=${y}&_type=json`,\n        )\n        .then(data => {\n          setWeather(data.data.response.body.items.item);\n          window.localStorage.setItem(\n            'weather',\n            JSON.stringify({\n              time: moment.tz('Asia/Seoul').format('HH:mm'),\n              date: moment.tz('Asia/Seoul').format('YYYY.MM.DD'),\n              item: data.data.response.body.items.item,\n            }),\n          );\n        });\n    }\n    if (position) {\n      if (!window.localStorage.getItem('weather')) {\n        getWeather();\n      } else if (!weather) {\n        setWeather(JSON.parse(window.localStorage.getItem('weather')));\n      }\n    }\n  }, [position, time, weather]);\n  return (\n    <>\n      <div id=\"weatherWrapper\">\n        <WeatherImage weather={weather} />\n        <WeatherTimePosition position={position} time={time} />\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport './reset.css';\nimport './App.css';\nimport Weather from './component/Weather';\n\nfunction App() {\n  return (\n    <>\n      <div id=\"background\" />\n      <div id=\"unsplashPhoto\">\n        <p>\n          Photo by\n          <br />\n          <a target=\"_blank\" href=\"https://unsplash.com/@enrapture\">\n            Enrapture Captivating Media\n          </a>\n          <br />\n        </p>\n      </div>\n      <Weather />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}