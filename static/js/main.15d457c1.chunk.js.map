{"version":3,"sources":["component/WeatherCard.jsx","component/xyConv.js","component/Weather.jsx","App.jsx","index.js"],"names":["WeatherCard","weather","useEffect","id","className","style","marginTop","item","filter","category","obsrValue","dong","baseTime","substring","date","RE","GRID","SLAT1","SLAT2","OLON","OLAT","XO","YO","Weather","useState","position","setPosition","time","setTime","setWeather","getPostion","lat","long","axios","get","toFixed","headers","then","data","latitude","longitude","results","region","area3","name","window","localStorage","setItem","JSON","stringify","navigator","geolocation","getCurrentPosition","p","getItem","parse","coords","error","positionJson","setInterval","moment","tz","format","hour","minute","seconds","ampm","v1","v2","DEGRAD","Math","PI","re","slat1","slat2","olon","olat","sn","tan","log","cos","sf","pow","ro","rs","lng","ra","theta","x","floor","sin","y","xyConv","response","body","items","getWeather","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15d457c1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function WeatherCard({ weather }) {\n  useEffect(() => {}, [weather]);\n  return (\n    <div id=\"weatherCardWrap\">\n      <p>현재 날씨</p>\n      <div id=\"weatherCardMain\">\n        <div className=\"weatherCard\" style={{ marginTop: '0' }}>\n          <p className=\"title\">기온</p>\n          <p className=\"details\">\n            {weather &&\n              `${\n                weather.item.filter(item => item.category === 'T1H')[0]\n                  .obsrValue\n              } ℃`}\n          </p>\n        </div>\n        <div className=\"weatherCard\" style={{ marginTop: '0' }}>\n          <p className=\"title\">비오나?눈오나?</p>\n          <p className=\"details\">\n            {weather &&\n              weather.item.filter(item => item.category === 'PTY')[0]\n                .obsrValue === 0 &&\n              '에잇! 안오네...'}\n            {weather &&\n              weather.item.filter(item => item.category === 'PTY')[0]\n                .obsrValue === 1 &&\n              '나이스! 비온다!'}\n            {weather &&\n              weather.item.filter(item => item.category === 'PTY')[0]\n                .obsrValue === 2 &&\n              '우와~ 비랑 눈 둘다!'}\n            {weather &&\n              weather.item.filter(item => item.category === 'PTY')[0]\n                .obsrValue === 3 &&\n              '나이스! 눈온다!'}\n            {weather &&\n              weather.item.filter(item => item.category === 'PTY')[0]\n                .obsrValue === 4 &&\n              '오! 소나기다!'}\n          </p>\n        </div>\n        <div className=\"weatherCard\" style={{ marginTop: '0' }}>\n          <p className=\"title\">습도</p>\n          <p className=\"details\">\n            {weather &&\n              `${\n                weather.item.filter(item => item.category === 'REH')[0]\n                  .obsrValue\n              } %`}\n          </p>\n        </div>\n        <div className=\"weatherCard\">\n          <p className=\"title\">풍속</p>\n          <p className=\"details\">\n            {weather &&\n              `${\n                weather.item.filter(item => item.category === 'WSD')[0]\n                  .obsrValue\n              } m/s`}\n          </p>\n        </div>\n        <div className=\"weatherCard\">\n          <p className=\"title\">지역기준</p>\n          <p className=\"details\">{weather && weather.dong}</p>\n        </div>\n        <div className=\"weatherCard\">\n          <p className=\"title\">날짜기준</p>\n          <p className=\"details\">\n            {weather && `${`${weather.item[0].baseTime}`.substring(0, 2)} 시`}\n            {weather && <span className=\"small\">{weather.date}</span>}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWeatherCard.propTypes = {\n  weather: PropTypes.object,\n};\n","const RE = 6371.00877; // 지구 반경(km)\nconst GRID = 5.0; // 격자 간격(km)\nconst SLAT1 = 30.0; // 투영 위도1(degree)\nconst SLAT2 = 60.0; // 투영 위도2(degree)\nconst OLON = 126.0; // 기준점 경도(degree)\nconst OLAT = 38.0; // 기준점 위도(degree)\nconst XO = 43; // 기준점 X좌표(GRID)\nconst YO = 136; // 기준점 Y좌표(GRID)\n\nexport default function xyConv(v1, v2) {\n  const DEGRAD = Math.PI / 180.0;\n\n  const re = RE / GRID;\n  const slat1 = SLAT1 * DEGRAD;\n  const slat2 = SLAT2 * DEGRAD;\n  const olon = OLON * DEGRAD;\n  const olat = OLAT * DEGRAD;\n\n  let sn =\n    Math.tan(Math.PI * 0.25 + slat2 * 0.5) /\n    Math.tan(Math.PI * 0.25 + slat1 * 0.5);\n  sn = Math.log(Math.cos(slat1) / Math.cos(slat2)) / Math.log(sn);\n  let sf = Math.tan(Math.PI * 0.25 + slat1 * 0.5);\n  sf = (Math.pow(sf, sn) * Math.cos(slat1)) / sn;\n  let ro = Math.tan(Math.PI * 0.25 + olat * 0.5);\n  ro = (re * sf) / Math.pow(ro, sn);\n  const rs = {};\n  rs.lat = v1;\n  rs.lng = v2;\n  let ra = Math.tan(Math.PI * 0.25 + v1 * DEGRAD * 0.5);\n  ra = (re * sf) / Math.pow(ra, sn);\n  let theta = v2 * DEGRAD - olon;\n  if (theta > Math.PI) theta -= 2.0 * Math.PI;\n  if (theta < -Math.PI) theta += 2.0 * Math.PI;\n  theta *= sn;\n  rs.x = Math.floor(ra * Math.sin(theta) + XO + 0.5);\n  rs.y = Math.floor(ro - ra * Math.cos(theta) + YO + 0.5);\n  return rs;\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment-timezone';\nimport WeatherCard from './WeatherCard';\nimport xyConv from './xyConv';\n\nexport default function Weather() {\n  const [position, setPosition] = useState();\n  const [time, setTime] = useState();\n  const [weather, setWeather] = useState();\n\n  useEffect(() => {\n    function getPostion(lat, long) {\n      axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/https://naveropenapi.apigw.ntruss.com/map-reversegeocode/v2/gc?request=coordsToaddr&coords=${long.toFixed(\n            4,\n          )},${+lat.toFixed(4)}&orders=admcode&output=json`,\n          {\n            headers: {\n              'X-NCP-APIGW-API-KEY-ID': 'y6syzp2el8',\n              'X-NCP-APIGW-API-KEY': 'oGUQ22oSWOEDf44apBf9QSZVKanLLauMgr5CnBDy',\n            },\n          },\n        )\n        .then(data => {\n          setPosition({\n            latitude: +lat.toFixed(4),\n            longitude: +long.toFixed(4),\n            dong: data.data.results[0].region.area3.name,\n          });\n          window.localStorage.setItem(\n            'position',\n            JSON.stringify({\n              latitude: +lat.toFixed(4),\n              longitude: +long.toFixed(4),\n              dong: data.data.results[0].region.area3.name,\n            }),\n          );\n        });\n    }\n    navigator.geolocation.getCurrentPosition(\n      p => {\n        if (!window.localStorage.getItem('position')) {\n          getPostion(p.coords.latitude, p.coords.longitude);\n        } else {\n          setPosition(JSON.parse(window.localStorage.getItem('position')));\n        }\n      },\n      error => {\n        if (window.localStorage.getItem('position')) {\n          const positionJson = JSON.parse(\n            window.localStorage.getItem('position'),\n          );\n          getPostion(positionJson.latitude, positionJson.longitude);\n        }\n      },\n    );\n    setInterval(() => {\n      setTime({\n        date: moment.tz('Asia/Seoul').format('YYYY.MM.DD'),\n        hour: moment.tz('Asia/Seoul').format('hh'),\n        minute: moment.tz('Asia/Seoul').format('mm'),\n        seconds: moment.tz('Asia/Seoul').format('ss'),\n        ampm: moment.tz('Asia/Seoul').format('A'),\n      });\n    }, 100);\n  }, []);\n\n  useEffect(() => {\n    function getWeather() {\n      const { x, y } = xyConv(position.latitude, position.longitude);\n      axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/http://newsky2.kma.go.kr/service/SecndSrtpdFrcstInfoService2/ForecastGrib?ServiceKey=j%2BeCKcismlZK%2BpaFNLrSPqSvTKVFFiiUqzXfxIXmNPl%2F4dWUGjlDL9wjnnAVFfGUGfJMK62lqnYwqLQe4r88fA%3D%3D&base_date=${moment\n            .tz('Asia/Seoul')\n            .format('YYYYMMDD')}&base_time=2200&nx=${x}&ny=${y}&_type=json`,\n        )\n        .then(data => {\n          setWeather({\n            time: moment.tz('Asia/Seoul').format('HH:mm'),\n            date: moment.tz('Asia/Seoul').format('YYYY.MM.DD'),\n            item: data.data.response.body.items.item,\n            dong: position.dong,\n          });\n          window.localStorage.setItem(\n            'weather',\n            JSON.stringify({\n              time: moment.tz('Asia/Seoul').format('HH:mm'),\n              date: moment.tz('Asia/Seoul').format('YYYY.MM.DD'),\n              item: data.data.response.body.items.item,\n              dong: position.dong,\n            }),\n          );\n        });\n    }\n    if (position) {\n      if (!window.localStorage.getItem('weather')) {\n        getWeather();\n      } else if (!weather) {\n        setWeather(JSON.parse(window.localStorage.getItem('weather')));\n      }\n    }\n  }, [position, weather]);\n\n  useEffect(() => {}, [time]);\n  return (\n    <>\n      <header>방구석</header>\n      <div id=\"weatherWrapper\">\n        <WeatherCard weather={weather} />\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport './reset.css';\nimport './App.css';\nimport Weather from './component/Weather';\n\nfunction App() {\n  return (\n    <>\n      <div id=\"background\" />\n      {/* <div id=\"unsplashPhoto\">\n        <p>\n          Photo by\n          <br />\n          <a target=\"_blank\" href=\"https://unsplash.com/@enrapture\">\n            Enrapture Captivating Media\n          </a>\n          <br />\n        </p>\n      </div> */}\n      <Weather />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}